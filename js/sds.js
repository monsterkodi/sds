// koffee 1.14.0

/*
 0000000  0000000     0000000
000       000   000  000     
0000000   000   000  0000000 
     000  000   000       000
0000000   0000000    0000000
 */
var args, error, extname, find, fs, getExtname, handleData, karg, kolor, noon, outext, pipeData, pipeMode, slash, startFileSearch,
    indexOf = [].indexOf;

noon = require('noon');

slash = require('path');

fs = require('fs');

karg = require('karg');

find = require('./find');

kolor = require('klor').kolor;

kolor.globalize();

args = karg("sds\n    file        . ? the file to search in           . *   . = package.json\n    key         . ? key to search            \n    value       . ? value to search\n    path        . ? path to search           \n    format      . ? result format\n    set         . ? set values \n    save        . ? write result back to input file . - S . = false \n    output      . ? the file to write or stdout     . - F     \n    json        . ? parse as json                         . = false\n    noon        . ? parse as noon                         . = false\n    object                                                . = false\n    result                                                . = false\n    colors      . ? output with ansi colors               . = false\n    stdin       . ? read from stdin                       . = false . - i\n    \nformat\n    @k  key\n    @v  value\n    @o  object\n    @p  path\n        \nshortcuts \n    -o  for -f @o\n    -r  for -f @v and no leading empty line\n\nversion     " + (require(__dirname + "/../package.json").version));

error = function(msg) {
    console.log(("\n" + msg + "\n").red);
    return process.exit();
};

extname = '';

outext = '';

handleData = function(data) {
    var colors, get, i, j, k, len, len1, o, out, p, path, ref, ref1, result, s, set, v;
    if ((ref = !data.constructor.name) === 'Array' || ref === 'Object') {
        console.error("no structure in data: " + (bold(yellow(data))));
    }
    colors = args.colors;
    if ((args.output != null) || args.save) {
        colors = false;
    }
    out = function(s) {
        var err, outfile, ref1;
        outfile = (ref1 = args.output) != null ? ref1 : (args.save ? args.file : void 0);
        if (outfile != null) {
            fs.mkdirSync(slash.dirname(outfile), {
                recursive: true
            });
            try {
                return fs.writeFile(outfile, s, 'utf8', function(err) {
                    if (err) {
                        return console.error("can't write " + (bold(yellow(outfile))) + ": " + err);
                    } else {
                        return console.log(gray("wrote " + (bold(white(outfile)))));
                    }
                });
            } catch (error1) {
                err = error1;
                return console.error("can't write " + (bold(yellow(outfile))) + ": " + err);
            }
        } else {
            return console.log(s);
        }
    };
    if (args.set != null) {
        set = require('./set');
        ref1 = noon.parse(args.set);
        for (p in ref1) {
            v = ref1[p];
            set(data, p, v);
        }
        return out(noon.stringify(data, {
            colors: colors,
            ext: outext
        }));
    } else if ((args.key == null) && (args.value == null) && (args.path == null)) {
        s = noon.stringify(data, {
            colors: colors,
            ext: outext
        });
        return out('\n' + s + '\n');
    } else {
        get = require('./get');
        if (!args.result) {
            console.log('');
        }
        result = (args.path != null) && (args.value != null) ? find.pathValue(data, args.path, args.value) : args.path != null ? find.path(data, args.path) : (args.key != null) && (args.value != null) ? find.keyValue(data, args.key, args.value) : args.key != null ? find.key(data, args.key) : find.value(data, args.value);
        if (args.object || args.result || args.format) {
            for (i = 0, len = result.length; i < len; i++) {
                path = result[i];
                p = path.join('.');
                k = path[path.length - 1];
                v = get(data, path);
                if (args.object) {
                    path.pop();
                    s = noon.stringify(get(data, path), {
                        colors: colors
                    });
                } else if (args.result) {
                    s = noon.stringify(v, {
                        colors: colors
                    });
                } else if (args.format) {
                    s = args.format;
                    s = s.replace('@k', k);
                    s = s.replace('@p', p);
                    s = s.replace('@v', noon.stringify(v, {
                        colors: colors
                    }));
                    if (args.format.indexOf('@o') >= 0) {
                        path.pop();
                        if (path.length) {
                            o = noon.stringify(get(data, path), {
                                colors: colors
                            });
                        } else {
                            o = noon.stringify(data, {
                                colors: colors
                            });
                        }
                        s = s.replace('@o', o);
                    }
                } else {
                    o = {};
                    o[p] = v;
                    s = noon.stringify(o, {
                        colors: colors
                    });
                }
                out(s);
            }
        } else {
            o = {};
            for (j = 0, len1 = result.length; j < len1; j++) {
                path = result[j];
                o[path.join('.')] = get(data, path);
            }
            s = noon.stringify(o, {
                colors: colors
            });
            out(s);
        }
        if (!args.result) {
            return out('');
        }
    }
};

pipeMode = false;

pipeData = "";

process.stdin.on('readable', function() {
    var data, ref;
    pipeMode = true;
    if (data = (ref = process.stdin.read()) != null ? ref.toString('utf8') : void 0) {
        return pipeData += data;
    }
});

process.stdin.on('end', function() {
    var data, ref, ref1;
    if (args.file === 'package.json') {
        delete args.file;
    }
    if ((args.value == null) && (args.key == null) && (args.path == null)) {
        args.path = args.file;
        args.result = true;
    }
    delete args.file;
    if ((ref = pipeData.trim()[0]) === '{' || ref === '[') {
        extname = '.json';
    } else {
        extname = '.noon';
    }
    outext = (ref1 = args.output) != null ? ref1 : extname;
    data = (function() {
        switch (extname) {
            case '.json':
                return JSON.parse(pipeData);
            default:
                return noon.parse(pipeData);
        }
    })();
    return handleData(data);
});

getExtname = function() {
    var ref;
    extname = args.json ? '.json' : args.noon ? '.noon' : args.file ? slash.extname(args.file) : '.json';
    if (indexOf.call(noon.extnames, extname) < 0) {
        console.error("unknown file type: " + (bold(yellow(extname))) + ". use --json or --noon to force type.");
    }
    outext = extname;
    if (ref = args.output, indexOf.call(noon.extnames, ref) >= 0) {
        outext = args.output;
        return delete args.output;
    }
};

startFileSearch = function() {
    var argsFile, file, i, len, ref;
    if (pipeMode || args.stdin) {
        return;
    }
    if (args.file == null) {
        if (fs.existsSync('./package.json')) {
            args.file = './package.json';
        } else if (fs.existsSync('./package.noon')) {
            args.file = './package.noon';
        } else {
            console.error('no input file provided!');
        }
    } else if (!fs.existsSync(args.file)) {
        argsFile = args.file;
        if ((args.value == null) && (args.key == null) && (args.path == null)) {
            ref = ['./package.json', './package.noon'];
            for (i = 0, len = ref.length; i < len; i++) {
                file = ref[i];
                if (fs.existsSync(file)) {
                    args.result = true;
                    args.path = argsFile;
                    args.file = file;
                    break;
                }
            }
        }
        if (argsFile === args.file) {
            console.error("can't find file: " + (bold(yellow(args.file))));
        }
    }
    getExtname();
    handleData(noon.load(args.file, extname));
    return process.exit(0);
};

setTimeout(startFileSearch, 1);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/sds.coffee