// koffee 1.14.0

/*
00000000  000  000   000  0000000  
000       000  0000  000  000   000
000000    000  000 0 000  000   000
000       000  000  0000  000   000
000       000  000   000  0000000
 */
var collect, find, regexp;

regexp = require('./regexp');

collect = require('./collect');

find = (function() {
    function find() {}

    find.key = function(object, key) {
        var keyReg;
        keyReg = this.reg(key);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.match(k, keyReg);
            };
        })(this));
    };

    find.path = function(object, path) {
        var pthReg;
        pthReg = this.reg(path);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.matchPath(p, pthReg);
            };
        })(this));
    };

    find.value = function(object, val) {
        var valReg;
        valReg = this.reg(val);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.match(v, valReg);
            };
        })(this));
    };

    find.keyValue = function(object, key, val) {
        var keyReg, valReg;
        keyReg = this.reg(key);
        valReg = this.reg(val);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.match(k, keyReg) && _this.match(v, valReg);
            };
        })(this));
    };

    find.pathValue = function(object, path, val) {
        var pthReg, valReg;
        pthReg = this.reg(path);
        valReg = this.reg(val);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.matchPath(p, pthReg) && _this.match(v, valReg);
            };
        })(this));
    };

    find.traverse = function(object, func) {
        return collect(object, func, function(p, v) {
            return p;
        });
    };

    find.matchPath = function(a, r) {
        return this.match(a.join('.'), r);
    };

    find.match = function(a, r) {
        var ref;
        if (!(a instanceof Array)) {
            return (ref = String(a).match(r)) != null ? ref.length : void 0;
        } else {
            return false;
        }
    };

    find.reg = function(s) {
        return regexp(s);
    };

    return find;

})();

module.exports = find;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC5qcyIsInNvdXJjZVJvb3QiOiIuLi9jb2ZmZWUiLCJzb3VyY2VzIjpbImZpbmQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQUEsR0FBVSxPQUFBLENBQVEsVUFBUjs7QUFDVixPQUFBLEdBQVUsT0FBQSxDQUFRLFdBQVI7O0FBRUo7OztJQUtGLElBQUMsQ0FBQSxHQUFELEdBQU0sU0FBQyxNQUFELEVBQVMsR0FBVDtBQUNGLFlBQUE7UUFBQSxNQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxHQUFMO2VBQ1QsSUFBQyxDQUFBLFFBQUQsQ0FBVSxNQUFWLEVBQWtCLENBQUEsU0FBQSxLQUFBO21CQUFBLFNBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMO3VCQUFXLEtBQUMsQ0FBQSxLQUFELENBQU8sQ0FBUCxFQUFVLE1BQVY7WUFBWDtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbEI7SUFGRTs7SUFJTixJQUFDLENBQUEsSUFBRCxHQUFPLFNBQUMsTUFBRCxFQUFTLElBQVQ7QUFDSCxZQUFBO1FBQUEsTUFBQSxHQUFTLElBQUMsQ0FBQSxHQUFELENBQUssSUFBTDtlQUNULElBQUMsQ0FBQSxRQUFELENBQVUsTUFBVixFQUFrQixDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTDt1QkFBVyxLQUFDLENBQUEsU0FBRCxDQUFXLENBQVgsRUFBYyxNQUFkO1lBQVg7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxCO0lBRkc7O0lBSVAsSUFBQyxDQUFBLEtBQUQsR0FBUSxTQUFDLE1BQUQsRUFBUyxHQUFUO0FBQ0osWUFBQTtRQUFBLE1BQUEsR0FBUyxJQUFDLENBQUEsR0FBRCxDQUFLLEdBQUw7ZUFDVCxJQUFDLENBQUEsUUFBRCxDQUFVLE1BQVYsRUFBa0IsQ0FBQSxTQUFBLEtBQUE7bUJBQUEsU0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUw7dUJBQVcsS0FBQyxDQUFBLEtBQUQsQ0FBTyxDQUFQLEVBQVUsTUFBVjtZQUFYO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQjtJQUZJOztJQU9SLElBQUMsQ0FBQSxRQUFELEdBQVcsU0FBQyxNQUFELEVBQVMsR0FBVCxFQUFjLEdBQWQ7QUFDUCxZQUFBO1FBQUEsTUFBQSxHQUFTLElBQUMsQ0FBQSxHQUFELENBQUssR0FBTDtRQUNULE1BQUEsR0FBUyxJQUFDLENBQUEsR0FBRCxDQUFLLEdBQUw7ZUFDVCxJQUFDLENBQUEsUUFBRCxDQUFVLE1BQVYsRUFBa0IsQ0FBQSxTQUFBLEtBQUE7bUJBQUEsU0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUw7dUJBQVcsS0FBQyxDQUFBLEtBQUQsQ0FBTyxDQUFQLEVBQVUsTUFBVixDQUFBLElBQXNCLEtBQUMsQ0FBQSxLQUFELENBQU8sQ0FBUCxFQUFVLE1BQVY7WUFBakM7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxCO0lBSE87O0lBS1gsSUFBQyxDQUFBLFNBQUQsR0FBVyxTQUFDLE1BQUQsRUFBUyxJQUFULEVBQWUsR0FBZjtBQUNQLFlBQUE7UUFBQSxNQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxJQUFMO1FBQ1QsTUFBQSxHQUFTLElBQUMsQ0FBQSxHQUFELENBQUssR0FBTDtlQUNULElBQUMsQ0FBQSxRQUFELENBQVUsTUFBVixFQUFrQixDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTDt1QkFBVyxLQUFDLENBQUEsU0FBRCxDQUFXLENBQVgsRUFBYyxNQUFkLENBQUEsSUFBMEIsS0FBQyxDQUFBLEtBQUQsQ0FBTyxDQUFQLEVBQVUsTUFBVjtZQUFyQztRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbEI7SUFITzs7SUFLWCxJQUFDLENBQUEsUUFBRCxHQUFXLFNBQUMsTUFBRCxFQUFTLElBQVQ7ZUFBa0IsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsSUFBaEIsRUFBc0IsU0FBQyxDQUFELEVBQUcsQ0FBSDttQkFBUztRQUFULENBQXRCO0lBQWxCOztJQVFYLElBQUMsQ0FBQSxTQUFELEdBQVksU0FBQyxDQUFELEVBQUksQ0FBSjtlQUFVLElBQUMsQ0FBQSxLQUFELENBQU8sQ0FBQyxDQUFDLElBQUYsQ0FBTyxHQUFQLENBQVAsRUFBb0IsQ0FBcEI7SUFBVjs7SUFFWixJQUFDLENBQUEsS0FBRCxHQUFRLFNBQUMsQ0FBRCxFQUFHLENBQUg7QUFDSixZQUFBO1FBQUEsSUFBRyxDQUFJLENBQUMsQ0FBQSxZQUFhLEtBQWQsQ0FBUDsyREFDc0IsQ0FBRSxnQkFEeEI7U0FBQSxNQUFBO21CQUdJLE1BSEo7O0lBREk7O0lBTVIsSUFBQyxDQUFBLEdBQUQsR0FBTSxTQUFDLENBQUQ7ZUFBTyxNQUFBLENBQU8sQ0FBUDtJQUFQOzs7Ozs7QUFFVixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICBcbjAwMCAgICAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwXG4wMDAwMDAgICAgMDAwICAwMDAgMCAwMDAgIDAwMCAgIDAwMFxuMDAwICAgICAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDBcbjAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgXG4jIyNcblxucmVnZXhwICA9IHJlcXVpcmUgJy4vcmVnZXhwJ1xuY29sbGVjdCA9IHJlcXVpcmUgJy4vY29sbGVjdCdcblxuY2xhc3MgZmluZFxuXG4gICAgIyBhY2NlcHQgYW4gb2JqZWN0IGFuZCBhIChrZXksIHBhdGggb3IgdmFsdWUpXG4gICAgIyByZXR1cm4gYSBsaXN0IG9mIGtleXBhdGhzIGZvciBtYXRjaGluZyAoa2V5LCBwYXRoIG9yIHZhbHVlKVxuXG4gICAgQGtleTogKG9iamVjdCwga2V5KSAtPiBcbiAgICAgICAga2V5UmVnID0gQHJlZyBrZXkgXG4gICAgICAgIEB0cmF2ZXJzZSBvYmplY3QsIChwLGssdikgPT4gQG1hdGNoIGssIGtleVJlZ1xuXG4gICAgQHBhdGg6IChvYmplY3QsIHBhdGgpIC0+IFxuICAgICAgICBwdGhSZWcgPSBAcmVnIHBhdGhcbiAgICAgICAgQHRyYXZlcnNlIG9iamVjdCwgKHAsayx2KSA9PiBAbWF0Y2hQYXRoIHAsIHB0aFJlZ1xuXG4gICAgQHZhbHVlOiAob2JqZWN0LCB2YWwpIC0+IFxuICAgICAgICB2YWxSZWcgPSBAcmVnIHZhbCAgICAgICAgIFxuICAgICAgICBAdHJhdmVyc2Ugb2JqZWN0LCAocCxrLHYpID0+IEBtYXRjaCB2LCB2YWxSZWdcblxuICAgICMgYWNjZXB0IGFuIG9iamVjdCwgYSAoa2V5IG9yIHBhdGgpIGFuZCBhIHZhbHVlXG4gICAgIyByZXR1cm4gYSBsaXN0IG9mIGtleXBhdGhzIGZvciBtYXRjaGluZyAoa2V5IG9yIHBhdGgpIGFuZCB2YWx1ZSBjb21iaW5hdGlvbnNcbiAgICAgICAgXG4gICAgQGtleVZhbHVlOiAob2JqZWN0LCBrZXksIHZhbCkgLT4gXG4gICAgICAgIGtleVJlZyA9IEByZWcga2V5IFxuICAgICAgICB2YWxSZWcgPSBAcmVnIHZhbCBcbiAgICAgICAgQHRyYXZlcnNlIG9iamVjdCwgKHAsayx2KSA9PiBAbWF0Y2goaywga2V5UmVnKSBhbmQgQG1hdGNoKHYsIHZhbFJlZylcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIEBwYXRoVmFsdWU6KG9iamVjdCwgcGF0aCwgdmFsKSAtPiBcbiAgICAgICAgcHRoUmVnID0gQHJlZyBwYXRoXG4gICAgICAgIHZhbFJlZyA9IEByZWcgdmFsICAgICAgICAgXG4gICAgICAgIEB0cmF2ZXJzZSBvYmplY3QsIChwLGssdikgPT4gQG1hdGNoUGF0aChwLCBwdGhSZWcpIGFuZCBAbWF0Y2godiwgdmFsUmVnKVxuICAgICAgICBcbiAgICBAdHJhdmVyc2U6IChvYmplY3QsIGZ1bmMpIC0+IGNvbGxlY3Qgb2JqZWN0LCBmdW5jLCAocCx2KSAtPiBwXG4gICAgXG4gICAgIyAwMCAgICAgMDAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwMDAwMDAwXG4gICAgIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgMDAwICAgMDAwXG4gICAgXG4gICAgQG1hdGNoUGF0aDogKGEsIHIpIC0+IEBtYXRjaCBhLmpvaW4oJy4nKSwgclxuICAgICAgICBcbiAgICBAbWF0Y2g6IChhLHIpIC0+XG4gICAgICAgIGlmIG5vdCAoYSBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICAgICAgU3RyaW5nKGEpLm1hdGNoKHIpPy5sZW5ndGhcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmFsc2VcblxuICAgIEByZWc6IChzKSAtPiByZWdleHAgc1xuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gZmluZFxuIl19
//# sourceURL=../coffee/find.coffee